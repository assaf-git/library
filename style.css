* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
    /* padding: 5px 10px 5px 3px; */
}

/* body {
    display: flex;
    flex-direction: column;
    min-height: 100vh;
} */

.container {
    /* height: 100%; */
    text-align: center;
    /* position: absolute;
    top: 50%;
    left: 50%; */
    display: flex;
    flex-direction: column;
    min-height: 100vh;
}

.library-header {
    font-size: 22px;
    padding: 15px;
    background: #FFFBFB;
    box-shadow: 0px 1px 15px 0px #c1c1c1;
}

.library-container {
    position: relative;
    top: 5px;
    padding-top: 25px;
    background: #f0eef1;
    display: flex;
    flex: 1;
    flex-flow: column nowrap;
    align-items: center;
}

.btn-add-book {
    font-size: 22px;
    font-weight: 500;
    font-family: 'Times New Roman', Times, serif;
    margin-bottom: 25px;
    padding: 5px 10px;
    border-radius: 6px;
    background: #FFFBFB;
}

.card-container {
    /* height: 100%;
    width: 75%;
    margin: auto;
    padding: 30px; */
    border: 2px solid black;
    display: grid;
    grid-template-columns: repeat(3, 1fr);
    grid-template-rows: repeat(2, 1fr);
    grid-auto-flow: row;
    gap: 10px;
}

.card {
    border: 1px solid black;
    border-radius: 4px;
}

#form-dialog {
    background-color: #F6F7F8;
    border: 1px solid #D6D9DC;
    border-radius: 3px;
    display: flex;
    justify-content: center;
    align-items: center;
    top: 30%;
    left: 39%;
    /* height: 33%; */
    width: 20%;

    /* width: 100%; */
    /* padding: 50px; */
    /* margin: 0 0 40px 0; */
  }

  .form-container {
    display: flex;
    flex-direction: column;
    align-items: center;
  }

  input, 
  label,
  select {
    box-sizing: border-box;
    width: 90%;
    margin: 10px 0 10px;
  }

  form div button,
  input,
  select {
    padding: 5px;
  }

  #read {
    margin-top: -5px;
  }

  form div button {
    box-sizing: border-box;
    width: 200px;
    margin: 10px 0 10px;
  }

/*   Open state of the dialog  */
dialog[open] {
    opacity: 1;
    transform: scaleY(1);
  }
  
  /*   Closed state of the dialog   */
  dialog {
    opacity: 0;
    transform: scaleY(0);
    transition:
      opacity 0.7s ease-out,
      transform 0.7s ease-out,
      overlay 0.7s ease-out allow-discrete,
      display 0.7s ease-out allow-discrete;
    /* Equivalent to
    transition: all 0.7s allow-discrete; */
  }
  
  /*   Before-open state  */
  /* Needs to be after the previous dialog[open] rule to take effect,
      as the specificity is the same */
  @starting-style {
    dialog[open] {
      opacity: 0;
      transform: scaleY(0);
    }
  }
  
  /* Transition the :backdrop when the dialog modal is promoted to the top layer */
  dialog::backdrop {
    background-color: rgb(0 0 0 / 0%);
    transition:
      display 0.7s allow-discrete,
      overlay 0.7s allow-discrete,
      background-color 0.7s;
    /* Equivalent to
    transition: all 0.7s allow-discrete; */
  }
  
  dialog[open]::backdrop {
    background-color: rgb(0 0 0 / 25%);
  }
  
  /* This starting-style rule cannot be nested inside the above selector
  because the nesting selector cannot represent pseudo-elements. */
  
  @starting-style {
    dialog[open]::backdrop {
      background-color: rgb(0 0 0 / 0%);
    }
  }